// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String  @unique
  clerkId   String  @unique
  name     String?
  bio     String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts    Post[] // One-To-Many
  comments Comment[] // One-To-Many
  likes    Like[] // One-To-Many

  followers Follows[] @relation("following")
  following Follows[]  @relation("followers")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}


model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade) // Cascade delete means that if a user is deleted, all their posts will be deleted as well

  comments  Comment[]
  likes     Like[]
  notifications Notification[] 
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[] // One-To-Many relation with Notification
  

  @@index([authorId,postId]) // This is a composite index that ensures that a user can only comment once on a post

}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId])
  @@unique([userId,postId]) // This is a unique constraint that ensures that a user can only like a post once
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("followers",fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following",fields: [followingId], references: [id], onDelete: Cascade)


  @@index([followerId,followingId]) // This is a composite index that ensures that a user can only follow another user once
  @@id([followerId,followingId]) // This is a composite primary key that ensures that a user can only follow another user once
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean @default(false)
  postId   String?
  commentId String?
  createdAt DateTime @default(now())


  // Relations
  user      User @relation("userNotifications",fields: [userId], references: [id], onDelete: Cascade)
  creator   User @relation("notificationCreator",fields: [creatorId], references: [id], onDelete: Cascade)
  post     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId,createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
